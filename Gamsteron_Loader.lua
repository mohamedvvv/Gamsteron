if _G.SDK then return end

_G.SDK =
{
    Init = {},
    Load = {},
    Draw = {},
    Tick = {},
    FastTick = {},
    WndMsg = {},
    DAMAGE_TYPE_PHYSICAL = 0,
    DAMAGE_TYPE_MAGICAL = 1,
    DAMAGE_TYPE_TRUE = 2,
    ORBWALKER_MODE_NONE = -1,
    ORBWALKER_MODE_COMBO = 0,
    ORBWALKER_MODE_HARASS = 1,
    ORBWALKER_MODE_LANECLEAR = 2,
    ORBWALKER_MODE_JUNGLECLEAR = 3,
    ORBWALKER_MODE_LASTHIT = 4,
    ORBWALKER_MODE_FLEE = 5,
}

do -- get version.lua
    SDK.Url = "https://raw.githubusercontent.com/gamsteron/Gamsteron/master/"

    local oldPath, newPath, url, timer

    oldPath = COMMON_PATH .. "Gamsteron_Version_Old.lua"
    newPath = COMMON_PATH .. "Gamsteron_Version.lua"
    url = SDK.Url .. "Gamsteron_Version.lua"
    
    if FileExist(oldPath) then
        SDK.OldVersion = require("Gamsteron_Version_Old")
    end
    
    DownloadFileAsync(url, newPath, function() end)
    
    timer = os.clock()
    
    while (not FileExist(newPath)) do
        if os.clock() > timer + 5 then
            assert(false, "Version Timeout ! Please try again 2xF6 !")
            break
        end
    end
    
    if os.clock() > timer + 5 then
        return
    end
    
    SDK.NewVersion = require("Gamsteron_Version")
end

do -- download updates
    local function DownloadFile(a, b)
        local url, path
        
        do -- get url
            if a:find("raw.githubusercontent.com") then
                url = a
                a = nil
            elseif b:find("raw.githubusercontent.com") then
                url = b
                b = nil
            else
                assert(false, "DownloadFile: wrong arguments (no url)")
            end
        end
        
        do -- get path
            if a then
                path = a
            elseif b then
                path = b
            else
                assert(false, "DownloadFile: wrong arguments (no path)")
            end
        end
        
        DownloadFileAsync(url, path, function() end)
        while not FileExist(path) do end
    end

    local Updated = false
    local function SaveOldVersion()
        local oldPath = COMMON_PATH .. "Gamsteron_Version_Old.lua"
        local newPath = COMMON_PATH .. "Gamsteron_Version.lua"
        local fi = io.open(newPath, "r")
        local fo = io.open(oldPath, "w")
        fo:write(fi:read("*all"))
        fi:close()
        fo:close()
    end

    if SDK.OldVersion == nil then
        -- downloading files - only once after installing Gamsteron.lua
        for k, v in pairs(SDK.NewVersion) do
            print("Downloading " .. k .. ".lua, please wait...")
            DownloadFile(COMMON_PATH .. k .. ".lua", SDK.Url .. k .. ".lua")
            SDK.Downloaded = true
            if not Updated then
                SaveOldVersion()
                Updated = true
            end
        end
    else
        -- check if there is a new version
        for k, v in pairs(SDK.NewVersion) do
            if SDK.OldVersion[k] == nil or v > SDK.OldVersion[k] then
                print("Downloading " .. k .. ".lua, please wait...")
                DownloadFile(COMMON_PATH .. k .. ".lua", SDK.Url .. k .. ".lua")
                SDK.Downloaded = true
                if not Updated then
                    SaveOldVersion()
                    Updated = true
                end
            end
        end
    end

    SDK.Version = 0
    -- download again if the user has deleted a file and the file version is the same as on github
    for k, v in pairs(SDK.NewVersion) do
        SDK.Version = SDK.Version + v
        if not FileExist(COMMON_PATH .. k .. ".lua") then
            print("Downloading " .. k .. ".lua, please wait...")
            DownloadFile(COMMON_PATH .. k .. ".lua", SDK.Url .. k .. ".lua")
            SDK.Downloaded = true
        end
    end

    -- create a new version file after manual removal by the user
    if not FileExist(COMMON_PATH .. "Gamsteron_Version_Old.lua") then
        SaveOldVersion()
    end
    
    if SDK.Downloaded then
        print("Update Completed, please 2x F6!")
        return
    end
end

-- global to local
local myHero, os, math, Game, Vector, Control, Draw, table, pairs, GetTickCount = myHero, os, math, Game, Vector, Control, Draw, table, pairs, GetTickCount

-- local classes
local Color, LevelUp, Action, Object, Target, Orbwalker, SummonerSpell, Item, Buff, Damage, Cursor, Health, Math, Data, Spell, Attack

-- Menu
SDK.Menu =
{
    Main =
    nil,
    
    Target =
    nil,
    
    Orbwalker =
    nil,
}

function SDK.Menu:Init
    ()
    
    local function Base64Decode(data)
        local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        data = string.gsub(data, '[^'..b..'=]', '')
        return (data:gsub('.', function(x)
            if (x == '=') then return '' end
            local r, f = '', (b:find(x) - 1)
            for i = 6, 1, -1 do r = r..(f % 2 ^ i - f % 2 ^ (i - 1) > 0 and '1' or '0') end return r;
        end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
            if (#x ~= 8) then return '' end
            local c = 0
            for i = 1, 8 do c = c + (x:sub(i, i) == '1' and 2 ^ (8 - i) or 0) end return string.char(c)
        end))
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode('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'))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Drawings.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Item_3072.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_LevelUp.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode('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'))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Loader.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode('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'))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Minion.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Orbwalker.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode('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'))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerBarrier.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerBoost.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerDot.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode('iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAIAAAAlC+aJAAAACXBIWXMAAAsTAAALEwEAmpwYAAATeUlEQVRogZWae3AkxX3HPzM9M9erkZZdJNZatNwhTr7jsMJxB5iEgsR3DjZnIDY4+SPlxFUOqUoqJo+qOJWKq5JKOZVHuZzHH3bs/OGUKylXObFDXI7NswyOeRk4Dh85rDtZoEOsWEVo2b2VRtua3Z7NHz0zO7vaA/L7Q9rp7un5fvv36F8/rDHbJhHPjgDXsseFZ0o0WqNDzW7xLJFHFzwvLZEAFEE6SCsuLPummAP7XScQaeNwD6VLc8D6W+36Bda3w/V2Z73daYDSKI2KAMJIh73dn+/344yANgrrqF5QUaS0lqLfnczUphwMemB6r9t/t+MY9OtvqfqObdC/azD9x3cmIBAaPCtGaZikj0prIMuhDXIX+oP7PSCfj9VVWwkNdGC9oeqWuxu9tGMlvL28AwGB0GjPFmE0rAHPFkSdlEbKIZc0yCW2eXC/d3DOA5AecOrJrbWVznqg1hvKNBhCL4XpczSksKcHTEgwTFNYSAet6fRiDralbeL+RC8CbLAjPAeITGfFrgCmJUC52+/t3hPF2d8tBIsh4NejpTNBWN9unA9aoCOCHkGPQmYYtSbQ0Es00NPmi4Pm2ZeLasC1YgJGPCFCrQHXsgHPEp4tfGtglKZ3feKmq93SnWPp49KZYOnl4JWXg7QkSD6Rd+xWNx5KXwAEEYDujTYjaSMFSuNoM8zWcAvPptOj08O14sFPOWTFT5yBHkDZcNiKyyqXCf+AB/gHvGAxHEKfSkXGzt3qRr4gSD6id9ltCj0naGtINaB7IzgMU0oIpB7sW8K3EwLJSJUlta0RrweLw24a9PAtfIu8I6oqBPKOrbpRqgHd08Kys0oouOQEQFvHTjLChIQJI6CgA50eLhqwu+RsOl0v6iEtLaNQEE0mnlpyBF1mpA3kuhFQclDPK/Vj5HwR8C40xrt+UcUaaEr2JdzHbO0nAyAjgEYX1cWGzi70bU0HzNTkiVEE/CSeSAvVQ1ro3u5WF5W5KfHcWvzV9S7q5YYhIN9X5Jn67vZXXu6qUKxux/ope9TCfq1r2YZDil5pUsPqE0jtx7dtPzsxWQAuooM2P4SlAWlpaUfAjBObb6cb7Z+y56b67xpRLzfjruaLew+LldPrQw2KeVHbYMK1gc3OaJf1bTcnaIQDhZ4AY0IXQ58VF+EhAMWwY1Ucr9qN+567TCy92W9QcgDUmVgJe68r7T1d2s0hlQnXznLwLBFEHdeyPVsY9OnU5toJAS8DOO95LkgYpIpHB7DN2Iu4D4FdIPLpSCIffVQKtiJZlvNlpjaa/ZdfV+oHVXk1AL/+iQNnqzPBCiDPx0F38vJS/a3aeILbgQBaIGGrpwGTmEWEuic8W+ue0D2Rwo5NaMK280II8JPvGq7GhGzsqBcJS+gkI/KxfUQaespO3F/tnDr60aK8tdT8Qb3537HFqxc21cmWvCEP+McPm8KZqlp9ZCXubUzw1uhEyLVskwTo3mjTcFL0+UHjMe6bim3ZwhadbsegN4XTjs0uqZ1tl39ltviBqeU/P5dyMBJ8/7T/wYTAWs0QWH1khTnp5+ygfdHUJ00fdtNwRqLfBtUDkBbSRkf9WoPeR/gIdvlDVgofmBwiEPfwwcPB909XPrxv9ZEVwyHYHuin4lHN6CObCAtLD3Fwxm0vn8bSHkBTo3pIoIe0yEHXvKMB6aEMMd/icjy6CJuZPfzMJAAXlBwvMC4BbyGYrUiaAHZQp1H3L6lx8lFu+Yx/x2G2Zuc+Voge+FtgYxvdxUwQxjOiHmWHZrevkzA2BzNqItSJE8uMFagI1YvHnkxK7FmQJCfAhGXnrdEWKY9Py+NlIHxqIy10r8W7NnmYOsDGOaYOApN33Tx519P1/3oGmHQA6t2B3nzbDqIkZlzki042d82iN2JSYs8m3GWfeVsAMx4ze6jsyXD4YBmlsuj9X8u8NnWQqYOc/Q6V3++XOWx0BziUHNa7+EKkBABh0pYonliNEpw0KyJj9+xalMRoLCYYGP4senl8uvCXR8kMv3vzpP+BjBtMHTBjn8rkXTcbDRgOqcQTCMLXOsvB0DBzp8kmnDByNRo7IslDXIPbjjMigK4KcUF4vXDO6S+Cj0vo0OwAlO8uFP7uDiD8cdXLKS5sejfEwxK3np5n9jgU2KkyNY6zDPiF+uzVcukCvqBo0YGgC6AjBPgWvuMZ0xUo6JhkHjvGEPWSecCkHLYVz8rCHlg+bOF2EIC3a/UTD+SJ6bFPHh5ZFUM3f/dURtab9NMXMDgZlATrmfhk0LuWEPRNPSZgEiZhIWx0hI5gV4h30SF2qSyB9ZrKVk2eKHvXZcBdku//8CZjAuX5izLcJQUB0IwoCYD1NIOwhGfHi0jDwRmIsjZ61xC3E/TjdID5G4rrb7SzBCZPTE+eKA+8c0k+w2FuGPrO6sVw+yMmRoCSzRZuJ4Eq7f6K2en0Ih0hkjdTDkW4dp//0mtBDpQjZKRlzwZm32Pzmp5VkHjIZR8qA2nk8a6eYqvd/7icoXsAx+inBhBpug1YBvTOenuDhowN1vUQoWp18QSyh7SZsNjoAXhJNhn3mqT6jjZRKYrRZ+XwPv+l1/orQGUJ2dPA8fsqj32xuvzcJlC4Y7p45+DwZ8UrIW9K0GekcA+cB4KHloH8jROt5zdNTd6hNTgbFGyaESbyGB/J5mnxmjhesiQ0VJdrZ/3D+/x/NXQza9Pl51qz788fv6/y1U8uZD+j32joNxri8iIg8jJGn5+HXejlIeQ1qPNpQeV3KtV/rKYcslIUNDQFm82MbRsaRgnDKzKjBNfm8D5/qErZotAdzhkLd5Yb3601v1srf7xolwsph7cTeY35Hzy0HDy8DFT/sZqtH1KC4eBlGojMntfAiiw1oUnPrZ/XtZb6yN7J+18NcGL73puXthXJrdgDTt04eeqfV158vP4bnzswOyXpKAo+lqarABwJ14CEdHlgjK0Fq2qpFr6ywXkFtCqd+c+W+NXimb9aXz4bN82BgiDSAp2zI8smjGy7JwCdhFtpXXxfaKERAocu9Xi17wYVD2Dpx8Hcdf7+w/53H68DR45NHj02Rac93IU0k24ar9KpJQ8tQD0Sh6P5z5ZKt/pA6VafswMBekg8S8PAhtVoAkXHHVluZOl08PC/jFoWFnwKieFNfyZTsXtTLd+v+9BM+rt0qz/7YLBcjTkEo/aFhsSJegBRDzcTgoqONzLXr4ZwemBn6sixySPHJgfQF30K92VpAaCgmaxV81kCWSnd6h//ueJXv1lLS4KeDkZtzpltOcAxXQogwqxLZ6SclrkWjYkxUVXtttPX6VLXnRrvB+N7KxSucgtXCKZhel+m/+n0V/P8M6e+9+ypB54FPv4H87O3fTqueBP1k1UqqJ+sFjYKqZtsHLH3r02ceXATWJexrYddYytRvLHegyRVcKKEQLrnO5NMKzdelvvyQsP8nvHcyh63ssdLJ6z3X+8Xpt3mU02geMuIyHP6Ww+c/tYDD//bA+bxS8tfL1x5aHczoPl4q3gs33i8ZR7nT+SBMw9uhl2zfwz083njAOaxk4bRLPqKzFVV+3hFPv9m++SGMuh/Nt+PqjNl96YbxqtvhAZ986nm8t+8OvsPs6Z24XuvPf+f9730Hw9kId77xd8bAt1+rh86m49vLv9ZtXAsXzyWNyNx5sEW0Bmc0cLegPuarduYQLRr+AGDHqjscYHqTljZ482U3ZnLvWdPbq3WOscLCYKnmvd/+glg4YEVoNF8u0gCBP+7pJ4byIiaj28Wjg07hiHgOjH6PpMoRg84dqTDnvYsIWyhIGdTD9s5m5MXNK7b3FLAVMFTXaaENz3l/cI97ovfCfJ7xIEPy9oz9UP5WLX/8+/ri4pJRwJRZuRulgo4fu9eqKXhqPP5v9881cgXZGvLBmobANM7AIwD3PapqX0157GTtXYXTG/JwIYR2xmv7ofRMNLYApgbyy1tt4HP31l5dLH1x9/rD1VxQpSv9l78TjB90C0f9NaeYaFlH8pHCy17UXFAMuUALGR2p/d/9Nrbv/bJ9FE9/LR65Gn1yDP58Rh9a2v0YnekmLE3YnLQOJ02SgAefqs5N5abG8u9xtaji63bDuQfXWyZlLqQiT9r5zrAwqY4NKEXWvb9b3gp+nRleOToxL2/WeFTn0jfav7hF9Qjz1wMXO2hVvn2vhVN3irnzvtLG0EKHfqWk3IYMZE9VG/cPlkEHl1sAbcdyL90esSpBHBoQgP3v+FBH/2ioghHjk4cOZoHlr59eunbp037615+KX03Hf7WVn+PvPZQy3uPB9SfUMDth0pffGI5+8XOrn1ya68XT7rCzgT46ULX8uo7GjiY94St1zd1aUKU8qK0v7fyggJu+a1C/q3ml74cv9JOzGb+evf2nX5eqap9h25nfDvr57WpAjD/uVmglEsq3lQPPdl7+OXmwy83gYKEZGvH5GwadNYHdKRTDssqPFLIGQLnWmG6Z77e0uqFeOd35aSqLg2PBzB/vcfTI8p3y8TdpfzdJeDQjaV+6VZCYL19exPAEAgGp2OdZAqjc6HHmttX5MaBeqiBqZxY39TA/IxX2i+NBlZeUMsbwy/OX+8CY5+L54TO4w19XnWeaA41kycmZ+4uG/QA2Wx6fTgp/PD7Cg+/3DTnUSn6VC6ajS5uhpPeQHwwHG757eLKyfaT/zSMyaCfv96bv8HjWDwxe8eK4mw7fKJhOPQcYdDnTkzFNjEo6483SmlGsq5A3j5fBAwB6HMwEg0RSK0o1GEtVGVZxGoDGx3bljZQa8r7vxze86fXyOfPLfywvscRQFNp4I4rOfDLRYBZXw3uyXhHit64BbjTEhDTki5ktKeQ1APqQX5GcCEe33adnTcBRCgOTcvH1pR06ZhtoSRLtXdrwHDwhLcWjphNzzW3mj/s3P8X58xjUYqG0gUpgMnrJVA/GUze4OvFQBzwAb0YCGw2Y7eJ1pQ9LfWaEuX0PB+9rWkMRLn2GwOfvvGK/Fd+dNGNjPSYVXORDdTajjpwqQ/UVYxj4Yf1Qz8/meVwVcEDJm/wDQf5kZxeDGIChQm2OgDjLludmEOtLcpSb2tAtzUI6gFAPWi/BaDeUICVTL83VCYeWxudngyaUE8LS6SGdKrVOJov1nbUYjOYlO6k9LIcgOVmOFvwDIf6C20z/ItfWS/1Nu33JsnfZhgT2Ipz42hNAR2dAfSWMujNk0GvaupMo3XjFaNXDqlYez07QR8fWAhLCFsY7iXp+o4wG0plV5a9XL3bP0CTEbfmvdd2NJDvifJV7tFf9AGZWUIwlXGIzK511ontTOCJziqg0bQbTWExZQp/tLL+Ry/9JD1Xz57gO1z8+AlYVx3oSAdgraOAq8Zy5lS9qsLsThNQe7VTezUsX+UV/uQTQPOvvz7Um71/FhD7ZwHsGISuVoUK9OvNqNoEGs0xoNEUzaYIrACoXDK8P5IVZzd63dNEYI9g9eJ207NFRXpVFVakt670azt63x5hlGA4AJcuvOYd2jf2sVs6Z1fEXbdmOshooxtrQ1xRYemUuKKoX290njlv0Gc/Wr0QrF4YncvEBIT1zmvnVJ5tBhQwHICVHb1vT/97hsCBs/HxY+fsCvNVMVsB9HKVSOhXktwm11+De5d5gLiiCBQfXTPDP/TdoBf5o2KMdZnjiowlpGRstLlTA6TX6jwb1QW4pVDYJ3ONbnthS90zXQQaoQ0U94jiHjFzJTPvpfJeqj8FzdRc0vt4RgPZ8OH0y9VZqlVdXdWrq1E5afON1eo333yzYLu52AdiP9Q98XY3tsKeJsKzhbl0Q2Zh+mSzSYF8nP23D43ngGZavSSA1Z8CyEz+KPzsbn9/1HRmh3zcEsDq6kDqc2Yzzg7bkQa8jN86gEanShiyKMNBCGHyWDczkz/ZbM5KeWhcLmwpQyDlUBwTq0sAM3MA9VfiV7xchkDG8MKdfvmZzczvVms+PyKMZv02XdQPcCC5WGA4OD1hoHd6A3FnYasfFq/Ke6+2wubgYeDqEoXMY05majPW1N7ql190yr2IXNSEOj0vVYVOVpu7315QCljotj/iFDp26Eu7A0uZs05pWSSHSGy7xTRBTBKm2rYavJ2YmSt6WnUVUHSkRJFYmh55bzSrhLgkY05m7hC2GLgymEh1O6TATYX8s83WUJW5P2b+ukI3OnGHOReg1lZA0M1EJELfFX7CcynYteU6KIOphJmJdyE0KQYZVQy1WG13nm22birkbyrkgWzasrGjDIEggsyBabOrgLV4kda3J5mcIwYdPZkU7x+Tp0ZdY8OE0ZEVhkaigX6qJ+x4E37oTLHd5abCRPZdYEbKw+O5mIDGFXYzvQ5kpeiHCCjAd+2gE4V2G5jzJfC119dqXSWt9OPvjgCWzjYXlgaRrjztbBWEEKanQAAUwHeoSFmREjg03t+BbO3oc0GQgO4TcOy+ltpQcu2SK0qeOLnV+MZacvkrg/Nd3Z1+l+IxcI6SyrPN5rMAFJ3m/jF/zvfnfP+g7wMph1R0fF0UYQ0c9c6P5zIHJX15Jw0Als5afHKWI0j6F5m/u8XODNF2Zsfu/fnJXyqVDIGaIr2RGvWi/h1DB2B+zC15QqG+sdY4s6UgvkWZafL20hNkprahNUO6uf3/lcXt4Avnl++6rAR4wqxjzc2sd37XDK4JOf8Hk+GYmHQ194cAAAAASUVORK5CYII='))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerExhaust.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerFlash.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerHaste.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode('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'))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerHeal.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerSmite.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_Spell_SummonerTeleport.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode(''))
            output:close()
        end
    end
    
    do
        local path = SPRITE_PATH .. 'MenuElement/Gamsteron_TargetSelector.png'
        if not FileExist(path) then
            local output = io.open(path, 'wb')
            output:write(Base64Decode('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'))
            output:close()
        end
    end

    self.Main = MenuElement({id = "GamsteronMainMenu", name = "Gamsteron", type = MENU, leftIcon = "/Gamsteron.png"})
    self.Main:MenuElement({id = "Loader", name = "Loader", type = MENU, leftIcon = "/Gamsteron_Loader.png"})
    self.Main.Loader:MenuElement({id = "Items", name = "Items", value = true})
    self.Main.Loader:MenuElement({id = "LevelUp", name = "LevelUp", value = true})
    self.Main.Loader:MenuElement({id = "SummonerSpells", name = "SummonerSpells", value = true})

    self.Target = self.Main:MenuElement({id = 'Target', name = 'Target Selector', type = MENU, leftIcon = '/Gamsteron_TargetSelector.png'})
    self.Target:MenuElement({id = 'Priorities', name = 'Priorities', type = MENU})
    self.Target:MenuElement({id = 'SelectedTarget', name = 'Selected Target', value = true})
    self.Target:MenuElement({id = 'OnlySelectedTarget', name = 'Only Selected Target', value = false})
    self.Target:MenuElement({id = 'SortMode' .. myHero.charName, name = 'Sort Mode', value = 1, drop = {'Auto', 'Closest', 'Near Mouse', 'Lowest HP', 'Lowest MaxHP', 'Highest Priority', 'Most Stack', 'Most AD', 'Most AP', 'Less Cast', 'Less Attack'}})
    
    self.Orbwalker = self.Main:MenuElement({id = 'Orbwalker', name = 'Orbwalker', type = MENU, leftIcon = '/Gamsteron_Orbwalker.png'})
    self.Orbwalker:MenuElement({id = 'Keys', name = 'Keys', type = MENU})
    self.Orbwalker.Keys:MenuElement({id = 'Combo', name = 'Combo Key', key = string.byte(' ')})
    self.Orbwalker.Keys:MenuElement({id = 'Harass', name = 'Harass Key', key = string.byte('C')})
    self.Orbwalker.Keys:MenuElement({id = 'LastHit', name = 'LastHit Key', key = string.byte('X')})
    self.Orbwalker.Keys:MenuElement({id = 'LaneClear', name = 'LaneClear Key', key = string.byte('V')})
    self.Orbwalker.Keys:MenuElement({id = 'Jungle', name = 'Jungle Key', key = string.byte('V')})
    self.Orbwalker.Keys:MenuElement({id = 'Flee', name = 'Flee Key', key = string.byte('A')})
    self.Orbwalker.Keys:MenuElement({id = 'HoldKey', name = 'Hold Key', key = string.byte('H'), tooltip = 'Should be same in game keybinds'})
    self.Orbwalker:MenuElement({id = 'General', name = 'General', type = MENU})
    self.Orbwalker.General:MenuElement({id = 'AttackTargetKeyUse', name = 'Attack Target Key Use', value = false})
    self.Orbwalker.General:MenuElement({id = 'AttackTKey', name = 'Attack Target Key', key = string.byte('U'), tooltip = 'You should bind this one in ingame settings'})
    self.Orbwalker.General:MenuElement({id = 'AttackResetting', name = 'Attack Resetting', value = true})
    self.Orbwalker.General:MenuElement({id = 'FastKiting', name = 'Fast Kiting', value = true})
    self.Orbwalker.General:MenuElement({id = 'LaneClearHeroes', name = 'LaneClear Heroes', value = true})
    self.Orbwalker.General:MenuElement({id = 'StickToTarget', name = 'Stick To Target: Only Melee', value = false})
    self.Orbwalker.General:MenuElement({id = 'SkipTargets', name = 'Move Around Targets', value = false})
    self.Orbwalker.General:MenuElement({id = 'MovementDelay', name = 'Movement Delay', value = 250, min = 150, max = 500, step = 50})
    self.Orbwalker.General:MenuElement({id = 'HoldRadius', name = 'Hold Radius', value = 0, min = 0, max = 250, step = 10})
    self.Orbwalker.General:MenuElement({id = 'ExtraWindUpTime', name = 'Extra WindUpTime', value = 0, min = -25, max = 75, step = 5})
    self.Orbwalker:MenuElement({id = 'RandomHumanizer', name = 'Random Humanizer', type = MENU})
    self.Orbwalker.RandomHumanizer:MenuElement({id = 'Enabled', name = 'Enabled', value = true})
    self.Orbwalker.RandomHumanizer:MenuElement({id = 'Min', name = 'Min', value = 160, min = 150, max = 300, step = 10})
    self.Orbwalker.RandomHumanizer:MenuElement({id = 'Max', name = 'Max', value = 240, min = 150, max = 400, step = 10})
    self.Orbwalker:MenuElement({id = 'Farming', name = 'Farming Settings', type = MENU})
    self.Orbwalker.Farming:MenuElement({id = 'LastHitPriority', name = 'Priorize Last Hit over Harass', value = true})
    self.Orbwalker.Farming:MenuElement({id = 'PushPriority', name = 'Priorize Push over Freeze', value = true})
    self.Orbwalker.Farming:MenuElement({id = 'ExtraFarmDelay', name = 'ExtraFarmDelay', value = 0, min = -80, max = 80, step = 10})
    
    if self.Main.Loader.SummonerSpells:Value() then
        self.SummonerSpellsLoaded = true
        self.SummonerSpells = self.Main:MenuElement({id = 'SummonerSpells', name = 'Summoner Spells', type = MENU, leftIcon = "/Gamsteron_Spell_SummonerFlash.png"})
        self.SummonerSpells:MenuElement({id = 'Cleanse', name = 'Cleanse', type = MENU, leftIcon = '/Gamsteron_Spell_SummonerBoost.png'})
        self.SummonerSpells.Cleanse:MenuElement({id = 'BuffTypes', name = 'Buff Types', type = MENU})
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Slow', name = 'Slow: nasus w', value = true})--SLOW = 10 -> nasus W, zilean E
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Stun', name = 'Stun: sona r', value = true})--STUN = 5
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Snare', name = 'Snare: xayah e', value = true})--SNARE = 11
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Supress', name = 'Supress: warwick r', value = true})--SUPRESS = 24
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Knockup', name = 'Knockup: yasuo q3', value = true})--KNOCKUP = 29
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Fear', name = 'Fear: fiddle q', value = true})--FEAR = 21 -> fiddle Q, ...
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Charm', name = 'Charm: ahri e', value = true})--CHARM = 22 -> ahri E, ...
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Taunt', name = 'Taunt: rammus e', value = true})--TAUNT = 8 -> rammus E, ...
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Knockback', name = 'Knockback: alistar w', value = true})--KNOCKBACK = 30 -> alistar W, lee sin R, ...
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Blind', name = 'Blind: teemo q', value = true})--BLIND = 25 -> teemo Q
        self.SummonerSpells.Cleanse.BuffTypes:MenuElement({id = 'Disarm', name = 'Disarm: lulu w', value = true})--DISARM = 31 -> Lulu W
        self.SummonerSpells.Cleanse:MenuElement({id = 'Enabled', name = 'Enabled', value = true})
        self.SummonerSpells.Cleanse:MenuElement({id = 'Count', name = 'Enemies Count', value = 1, min = 0, max = 5, step = 1})
        self.SummonerSpells.Cleanse:MenuElement({id = 'Distance', name = 'Enemies Distance < X', value = 1200, min = 0, max = 1500, step = 50})
        self.SummonerSpells.Cleanse:MenuElement({id = 'Duration', name = 'Buff Duration > X', value = 500, min = 0, max = 1000, step = 50})
    end

    if self.Main.Loader.Items:Value() then
        self.ItemsLoaded = true
        self.Main:MenuElement({id = 'Items', name = 'Items', type = MENU, leftIcon = '/Gamsteron_Item_3072.png'})
        self.Main.Items:MenuElement({id = 'Qss', name = 'Qss', type = MENU})
        self.Main.Items.Qss:MenuElement({id = 'BuffTypes', name = 'Buff Types', type = MENU})
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Slow', name = 'Slow: nasus w', value = true})--SLOW = 10 -> nasus W, zilean E
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Stun', name = 'Stun: sona r', value = true})--STUN = 5
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Snare', name = 'Snare: xayah e', value = true})--SNARE = 11
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Supress', name = 'Supress: warwick r', value = true})--SUPRESS = 24
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Knockup', name = 'Knockup: yasuo q3', value = true})--KNOCKUP = 29
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Fear', name = 'Fear: fiddle q', value = true})--FEAR = 21 -> fiddle Q, ...
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Charm', name = 'Charm: ahri e', value = true})--CHARM = 22 -> ahri E, ...
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Taunt', name = 'Taunt: rammus e', value = true})--TAUNT = 8 -> rammus E, ...
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Knockback', name = 'Knockback: alistar w', value = true})--KNOCKBACK = 30 -> alistar W, lee sin R, ...
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Blind', name = 'Blind: teemo q', value = true})--BLIND = 25 -> teemo Q
        self.Main.Items.Qss.BuffTypes:MenuElement({id = 'Disarm', name = 'Disarm: lulu w', value = true})--DISARM = 31 -> Lulu W
        self.Main.Items.Qss:MenuElement({id = 'Enabled', name = 'Enabled', value = true})
        self.Main.Items.Qss:MenuElement({id = 'Count', name = 'Enemies Count', value = 1, min = 0, max = 5, step = 1})
        self.Main.Items.Qss:MenuElement({id = 'Distance', name = 'Enemies Distance < X', value = 1200, min = 0, max = 1500, step = 50})
        self.Main.Items.Qss:MenuElement({id = 'Duration', name = 'Buff Duration > X', value = 500, min = 0, max = 1000, step = 50})
        self.Main.Items:MenuElement({id = 'Botrk', name = 'Botrk', type = MENU})
        self.Main.Items.Botrk:MenuElement({id = 'Enabled', name = 'Enabled', value = true})
        self.Main.Items.Botrk:MenuElement({id = 'AntiMelee', name = 'Anti Melee', value = true})
        self.Main.Items.Botrk:MenuElement({id = 'HeroHealth', name = 'Hero Health % < X', value = 50, min = 0, max = 100, step = 1})
        self.Main.Items.Botrk:MenuElement({id = 'TargetDistance', name = 'Target Distance < X', value = 0, min = 0, max = 650, step = 10})
        self.Main.Items.Botrk:MenuElement({id = 'FleeRange', name = 'Flee Target Distance > X', value = 550, min = 300, max = 600, step = 10})
        self.Main.Items.Botrk:MenuElement({id = 'FleeHealth', name = 'Flee Target Health % < X', value = 50, min = 0, max = 100, step = 1})
        self.Main.Items:MenuElement({id = 'HexGun', name = 'Hex Gunblade', type = MENU})
        self.Main.Items.HexGun:MenuElement({id = 'Enabled', name = 'Enabled', value = true})
        self.Main.Items.HexGun:MenuElement({id = 'AntiMelee', name = 'Anti Melee', value = true})
        self.Main.Items.HexGun:MenuElement({id = 'HeroHealth', name = 'Hero Health % < X', value = 50, min = 0, max = 100, step = 1})
        self.Main.Items.HexGun:MenuElement({id = 'TargetDistance', name = 'Target Distance < X', value = 300, min = 0, max = 700, step = 10})
        self.Main.Items.HexGun:MenuElement({id = 'FleeRange', name = 'Flee Target Distance > X', value = 550, min = 300, max = 600, step = 10})
        self.Main.Items.HexGun:MenuElement({id = 'FleeHealth', name = 'Flee Target Health % < X', value = 50, min = 0, max = 100, step = 1})
    end
    
    self.Main:MenuElement({id = 'Drawings', name = 'Drawings', type = MENU, leftIcon = '/Gamsteron_Drawings.png'})
    self.Main.Drawings:MenuElement({id = 'Enabled', name = 'Enabled', value = true})
    self.Main.Drawings:MenuElement({id = 'Cursor', name = 'Cursor', value = true})
    self.Main.Drawings:MenuElement({id = 'Range', name = 'AutoAttack Range', value = true})
    self.Main.Drawings:MenuElement({id = 'EnemyRange', name = 'Enemy AutoAttack Range', value = true})
    self.Main.Drawings:MenuElement({id = 'HoldRadius', name = 'Hold Radius', value = false})
    self.Main.Drawings:MenuElement({id = 'LastHittableMinions', name = 'Last Hittable Minions', value = true})
    self.Main.Drawings:MenuElement({id = 'SelectedTarget', name = 'Selected Target', value = true})
    
    if self.Main.Loader.LevelUp:Value() then
        self.LevelUpLoaded = true
        self.AutoLevelUp = self.Main:MenuElement({id = 'AutoLvlUp', name = 'Auto Level Up', type = MENU, leftIcon = '/Gamsteron_LevelUp.png'});
        self.AutoLevelUp:MenuElement({id = 'Enabled', name = 'Enabled', value = false})
        self.SkillOrder = self.AutoLevelUp:MenuElement({id = 'SkillOrder' .. myHero.charName, name = 'Skill Order', value = 2, drop = {myHero.charName .. ' Most Frequent', myHero.charName .. ' Highest Win'}})
        self.AutoLevelUp:MenuElement({id = 'StartAt', name = 'Start at level', value = 2, min = 1, max = 18, step = 1})
    end
    
    self.Main:MenuElement({name = '', type = _G.SPACE, id = 'GeneralSpace'})
    self.Main:MenuElement({id = 'Latency', name = 'Super important ! latency/ping/ms', value = 50, min = 0, max = 120, step = 1, callback = function(value) _G.LATENCY = value end})
    self.Main:MenuElement({id = 'CursorDelay', name = 'Cursor Delay', value = 30, min = 30, max = 50, step = 5})
    
    self.Main:MenuElement({name = '', type = _G.SPACE, id = 'VersionSpaceA'})
    self.Main:MenuElement({name = 'Version  ' .. SDK.Version, type = _G.SPACE, id = 'VersionSpaceB'})
    
    _G.LATENCY = self.Main.Latency:Value()
end

require("Gamsteron_Utilities")
Color = SDK.Color
Action = SDK.Action
Buff = SDK.BuffManager
Math = SDK.Math
Damage = SDK.Damage
Data = SDK.Data
Spell = SDK.Spell

require("Gamsteron_Activator")
LevelUp = SDK.LevelUp
SummonerSpell = SDK.SummonerSpell
Item = SDK.ItemManager

require("Gamsteron_ObjectManager")
Object = SDK.ObjectManager
Target = SDK.TargetSelector
Health = SDK.HealthPrediction

require("Gamsteron_Orbwalker")
Cursor = SDK.Cursor
Attack = SDK.Attack
Orbwalker = SDK.Orbwalker

SDK.Init.Utilities()
SDK.Init.Activator()
SDK.Init.ObjectManager()
SDK.Init.Orbwalker()

SDK.Menu:Init()
if SDK.Menu.LevelUpLoaded then LevelUp:Init() end
Action:Init()
Object:Init()
Target:Init()
Orbwalker:Init()
if SDK.Menu.SummonerSpellsLoaded then SummonerSpell:Init() end
if SDK.Menu.ItemsLoaded then Item:Init() end
Buff:Init()
Damage:Init()
Cursor:Init()
Health:Init()
Data:Init()
Spell:Init()

Callback.Add('Load', function()
    local sdk, drawEnabled
    
    sdk = _G.SDK
    drawEnabled = SDK.Menu.Main.Drawings.Enabled
    
    for k, v in pairs(sdk.Load) do v() end

    Callback.Add("Draw", function()
        for i = 1, #sdk.FastTick do sdk.FastTick[i]() end
        if not drawEnabled:Value() then return end
        for i = 1, #sdk.Draw do sdk.Draw[i]() end
    end)
    Callback.Add("Tick", function()
        for i = 1, #sdk.Tick do sdk.Tick[i]() end
    end)
    Callback.Add("WndMsg", function(msg, wParam)
        for i = 1, #sdk.WndMsg do sdk.WndMsg[i](msg, wParam) end
    end)
    
    -- Disabling GoS Orbwalker
    if _G.Orbwalker then
        _G.Orbwalker.Enabled:Value(false);
        _G.Orbwalker.Drawings.Enabled:Value(false);
    end
end)